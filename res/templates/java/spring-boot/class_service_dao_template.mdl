package ${PROJECT_PACKAGE}.${DAOS_PACKAGE};

import javax.persistence.EntityManager;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import ${PROJECT_PACKAGE}.${ENTITY_PACKAGE}.${ENTITY_CLASS};
import ${PROJECT_PACKAGE}.${MODEL_PACKAGE}.${MODEL_CLASS};
import ${PROJECT_PACKAGE}.${REQUEST_TABLE_PACKAGE}.*;
import ${PROJECT_PACKAGE}.${REPOSITORY_PACKAGE}.${REPOSITORY_CLASS};

@Service
public class ${DAO_CLASS} {

    @Autowired
    EntityManager entityManager;

    @Autowired
    ${REPOSITORY_CLASS} ${REPOSITORY_OBJECT};

    public ${ENTITY_CLASS} insert(${POST_REQUEST_CLASS} ${POST_REQUEST_OBJECT}) {

        ${ENTITY_CLASS} ${ENTITY_OBJECT} = new ${ENTITY_CLASS}();
        ${ENTITY_DATA_FROM_POST_REQUEST}

        return ${REPOSITORY_OBJECT}.save(${ENTITY_OBJECT});
    }

    public ${ENTITY_CLASS} find(${PK_COLUMN_DATATYPE} ${PK_OBJECT}) {

        Optional<${ENTITY_CLASS}> ${ENTITY_OBJECT}Opt = ${REPOSITORY_OBJECT}.findById(${PK_OBJECT});

        return ${ENTITY_OBJECT}Opt.orElse(null);
    }

    public ${ENTITY_CLASS} update (${PK_COLUMN_DATATYPE} ${PK_OBJECT}, ${PUT_REQUEST_CLASS} ${PUT_REQUEST_OBJECT}) {

        Optional<${ENTITY_CLASS}> ${ENTITY_OBJECT}Opt = ${REPOSITORY_OBJECT}.findById(${PK_OBJECT});

        if(${ENTITY_OBJECT}Opt.isPresent()) {

            ${ENTITY_CLASS} ${ENTITY_OBJECT} = ${ENTITY_OBJECT}Opt.get();
            ${ENTITY_DATA_FROM_PUT_REQUEST}

            return ${REPOSITORY_OBJECT}.save(${ENTITY_OBJECT});

        }

        return null;
    }

    public boolean delete(${PK_COLUMN_DATATYPE} ${PK_OBJECT}) {

        Optional<${ENTITY_CLASS}> ${ENTITY_OBJECT}Opt = ${REPOSITORY_OBJECT}.findById(${PK_OBJECT});

        if(${ENTITY_OBJECT}Opt.isPresent()) {

            ${ENTITY_CLASS} ${ENTITY_OBJECT} = ${ENTITY_OBJECT}Opt.get();
            ${REPOSITORY_OBJECT}.delete(${ENTITY_OBJECT});

            return true;
        }

        return false;
    }

    public List<${ENTITY_CLASS}> search() {

        CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
        CriteriaQuery<${ENTITY_CLASS}> criteriaQuery = criteriaBuilder.createQuery(${ENTITY_CLASS}.class);

        Root<${ENTITY_CLASS}> adBaring = criteriaQuery.from(${ENTITY_CLASS}.class);
        List<Predicate> predicates = new ArrayList<>();
        //Add predicates
        criteriaQuery.where(predicates.toArray(new Predicate[0]));
        List<${ENTITY_CLASS}> ${ENTITY_OBJECT}List =  entityManager.createQuery(criteriaQuery).getResultList();

        return ${ENTITY_OBJECT}List;
    }

    public List<${ENTITY_CLASS}> findAll() {
        return ${REPOSITORY_OBJECT}.findAll();
    }
}
