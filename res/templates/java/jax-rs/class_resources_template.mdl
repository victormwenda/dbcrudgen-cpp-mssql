package ${PROJECT_PACKAGE}.${RESOURCES_PACKAGE};

import ${PROJECT_PACKAGE}.${ENTITY_PACKAGE}.${ENTITY_CLASS};
import ${PROJECT_PACKAGE}.${TRX_PACKAGE}.${TRX_CLASS};

import javax.ws.rs.*;
import javax.ws.rs.core.*;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;

@Path("/${RESOURCE-NAME}")
${VISIBILITY} class ${CLASS_NAME} {

    @GET
    @Path("/get/{${PK_COLUMN_NAME}}")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getOne(@PathParam("${PK_COLUMN_NAME}") ${PK_COLUMN_DATATYPE} ${PK_COLUMN_NAME}) {
        ${TRX_CLASS} ${TRX_OBJECT} = new ${TRX_CLASS}();
        ${ENTITY_CLASS} ${ENTITY_OBJECT} = ${TRX_OBJECT}.queryOne(${PK_COLUMN_NAME});
        return Response.ok(${ENTITY_OBJECT}).build();
    }


    @GET
    @Path("/list")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getAll() {
        ${TRX_CLASS} ${TRX_OBJECT} = new ${TRX_CLASS}();
        List list = ${TRX_OBJECT}.queryAll();
        return Response.ok().entity(list).build();
    }

    @GET
    @Path("/search")
    @Produces(MediaType.APPLICATION_JSON)
    public Response search() {
        ${TRX_CLASS} ${TRX_OBJECT} = new ${TRX_CLASS}();
        List list = ${TRX_OBJECT}.queryAll();
        return Response.ok().entity(list).build();
    }

    @POST
    @Path("/create")
    @Produces(MediaType.APPLICATION_JSON)
    public Response create(@Context UriInfo uriInfo, ${ENTITY_CLASS} ${ENTITY_OBJECT}) throws URISyntaxException {
        ${TRX_CLASS} ${TRX_OBJECT} = new ${TRX_CLASS}();
        ${TRX_OBJECT}.insert(${ENTITY_OBJECT});

        ${PK_COLUMN_DATATYPE} ${PK_COLUMN_NAME} = ${ENTITY_OBJECT}.${PK_METHOD_GETTER}();

        UriBuilder builder = uriInfo.getBaseUriBuilder().path(${CLASS_NAME}.class).path(String.valueOf(id));
        URI uri = builder.build();
        return Response.created(uri).entity(${ENTITY_OBJECT}).build();
    }

    @PUT
    @Path("/update")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public Response update(${ENTITY_CLASS} ${ENTITY_OBJECT}) {
        ${TRX_CLASS} ${TRX_OBJECT} = new ${TRX_CLASS}();
        ${TRX_OBJECT}.update(${ENTITY_OBJECT});
        return Response.ok().entity(${ENTITY_OBJECT}).build();
    }

    @DELETE
    @Path("/delete/{${PK_COLUMN_NAME}}")
    @Produces(MediaType.APPLICATION_JSON)
    public Response delete(@PathParam("${PK_COLUMN_NAME}") ${PK_COLUMN_DATATYPE} ${PK_COLUMN_NAME}) {
        ${TRX_CLASS} ${TRX_OBJECT} = new ${TRX_CLASS}();
        ${ENTITY_CLASS} ${ENTITY_OBJECT} = ${TRX_OBJECT}.queryOne(${PK_COLUMN_NAME});
        ${TRX_OBJECT}.delete(${ENTITY_OBJECT});
        return Response.noContent().build();
    }

}