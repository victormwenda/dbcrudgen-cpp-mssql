package ${PROJECT_PACKAGE}.${TRANSACTIONS_PACKAGE};

import ${PROJECT_PACKAGE}.${ENTITY_PACKAGE}.${ENTITY_CLASS};

import javax.persistence.Query;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;
import java.util.List;

${VISIBILITY} class ${CLASS_NAME} extends AbstractableTransactionsExecutor {

    ${VISIBILITY} ${CLASS_NAME} () {
        super();
    }

    /**
     * Insert new item into the database
     *
     * @param ${ENTITY_OBJECT}
     */
    public Object insert(Object ${ENTITY_OBJECT}) {
        return super.insert(${ENTITY_OBJECT});
    }

    /**
     * Update database item
     *
     * @param ${ENTITY_OBJECT}
     */
    public void update(${ENTITY_CLASS} ${ENTITY_OBJECT}) {
        super.update(${ENTITY_OBJECT});
    }

    /**
     * Delete an item from the database
     *
     * @param ${ENTITY_OBJECT}
     */
    public void delete(${ENTITY_CLASS} ${ENTITY_OBJECT}) {
        super.delete(${ENTITY_OBJECT});
    }

    /**
     * Get the queried item from the database
     *
     * @param ${ENTITY_PRIMARY_KEY}
     * @return
     */
    public ${ENTITY_CLASS} queryOne(${PRIMARY_KEY_DATATYPE} ${ENTITY_PRIMARY_KEY}) {
        return (${ENTITY_CLASS}) super.queryOne(${ENTITY_CLASS}.class, ${ENTITY_PRIMARY_KEY});
    }

    /**
     * Get all the records in the entity
     *
     * @return
     */
    public List queryMany() {
        return queryAll();
    }

    /**
     * Get all the records in the entity
     *
     * @return
     */
    public List queryAll() {

        CriteriaBuilder criteriaBuilder = getSession().getCriteriaBuilder();
        CriteriaQuery criteriaQuery = criteriaBuilder.createQuery(${ENTITY_CLASS}.class);

        Root<Class> root = criteriaQuery.from(${ENTITY_CLASS}.class);
        CriteriaQuery<Class> select = criteriaQuery.select(root);
        Query query = getSession().createQuery(select);

        return query.getResultList();
    }
}